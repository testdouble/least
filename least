#!/usr/bin/env ruby
require 'io/console'
require 'io/wait'

KEY_CTRL_C = ?\C-c

class ANSI
  ESC = 27.chr

  class << self
    def escape(sequence)
      ESC + "[" + sequence
    end

    def clear
      escape "2J"
    end

    def cursor_top
      escape "H"
    end

    def cursor_beginnning_of_line
      escape "G"
    end
  end
end

class TTY < Struct.new(:console_file)
  def self.with_tty(&block)
    # Selecta reads data from stdin and writes it to stdout, so we can't draw
    # UI and receive keystrokes through them. Fortunately, all modern
    # Unix-likes provide /dev/tty, which IO.console gives us.
    console_file = IO.console
    tty = TTY.new(console_file)
    block.call(tty)
  end

  def get_available_input
    console_file.getc if console_file.ready?
  end

  def winsize
    console_file.winsize
  end

  def stty(args)
    command("stty #{args}").strip
  end

  def write_line(line)
    console_file.puts line
    print ANSI.cursor_beginnning_of_line
  end

  private

  # Run a command with the TTY as stdin, capturing the output via a pipe
  def command(command)
    IO.pipe do |read_io, write_io|
      pid = Process.spawn(command, :in => "/dev/tty", :out => write_io)
      Process.wait(pid)
      raise "Command failed: #{command.inspect}" unless $?.success?
      write_io.close
      read_io.read
    end
  end
end

class Least
  attr_reader :tty

  def main
    @tty = TTY.new(IO.console)
    original_tty_state = tty.stty("-g")
    tty.stty("raw")

    print ANSI.clear
    print ANSI.cursor_top
    loop do
      handle_user_input
      handle_piped_input
    end
  rescue Interrupt, RuntimeError
    puts "Exiting..."
  ensure
    tty.stty(original_tty_state)
  end

  def handle_user_input
    input = tty.get_available_input

    # Handle special characters
    case input
    when KEY_CTRL_C
      raise "We should exit now"
    end

    tty.write_line "input: #{input}" if input
  end

  def handle_piped_input
    return if STDIN.eof?

    tty.write_line STDIN.readline
  end
end

if __FILE__ == $0
  Least.new.main
end

